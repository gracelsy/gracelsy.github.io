<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何优雅的白嫖CloudFlare之搭建Docker镜像加速服务</title>
      <link href="/posts/efb26950.html"/>
      <url>/posts/efb26950.html</url>
      
        <content type="html"><![CDATA[<hr><p><a href="https://www.cloudflare-cn.com/enterprise/">Cloudflare</a>是一家提供CDN、网络安全、DDos防御和域名服务的美国公司。全世界有20%的互联网流量都经过了Cloudflare的网络代理。基于Cloudflare Workers我们可以白嫖dockerhub、gcr、quay等镜像代理服务和Github下载加速服务。</p><p>总所周知，国外的docker镜像服务器很难访问很难访问，经常会发生Docker拉取镜像失败的问题，在国内使用都是通过配置镜像源来加速镜像拉取的操作，然而因为国内监管的问题，许多常用的国内镜像站（包括各种云服务商和高校镜像站）已经无法使用。</p><p>为了在国内正常拉取Docker镜像，非常建议自己搭建一个Docker镜像代理。</p><h2 id="访问Github仓库-Docker仓库镜像代理工具"><a href="#访问Github仓库-Docker仓库镜像代理工具" class="headerlink" title="访问Github仓库 Docker仓库镜像代理工具"></a>访问Github仓库 <a href="https://github.com/cmliu/CF-Workers-docker.io">Docker仓库镜像代理工具</a></h2><p>这个项目是一个基于 Cloudflare Workers 的 Docker 镜像代理工具。它能够中转对 Docker 官方镜像仓库的请求，解决一些访问限制和加速访问的问题。</p><h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><h3 id="Workers-部署"><a href="#Workers-部署" class="headerlink" title="Workers 部署"></a><strong>Workers</strong> 部署</h3><ul><li>在Cloudflare中找到并创建<strong>Workers</strong>项目</li></ul><p><img src="https://gh.zsir.us.kg/https://raw.githubusercontent.com/gracelsy/picx-images-hosting/master/%E5%88%9B%E5%BB%BAworker.png"></p><ul><li>为Cloudflare Workers项目命名，建议是项目名称系统默认就可以了，因为不可描述的原因workers.dev域名在国内是无法访问的，所以我们需要自定义域名访问</li></ul><p><img src="https://gh.zsir.us.kg/https://raw.githubusercontent.com/gracelsy/picx-images-hosting/master/%E4%B8%BA%E9%A1%B9%E7%9B%AE%E5%91%BD%E5%90%8D.png"></p><ul><li>点击编辑代码</li></ul><p><img src="https://gh.zsir.us.kg/https://raw.githubusercontent.com/gracelsy/picx-images-hosting/master/%E7%82%B9%E5%87%BB%E7%BC%96%E8%BE%91%E4%BB%A3%E7%A0%81.png"></p><ul><li><p>复制项目中 <a href="https://github.com/cmliu/CF-Workers-docker.io/blob/main/_worker.js">worker.js</a> 文件内的代码粘贴到Worker项目中并点击部署</p><p>`// _worker.js</p><p>// Docker镜像仓库主机地址<br>let hub_host = ‘registry-1.docker.io’;<br>// Docker认证服务器地址<br>const auth_url = ‘<a href="https://auth.docker.io/">https://auth.docker.io</a>‘;</p><p>let 屏蔽爬虫UA = [‘netcraft’];</p><p>// 根据主机名选择对应的上游地址<br>function routeByHosts(host) {<br>// 定义路由表<br>const routes = {<br>    // 生产环境<br>    “quay”: “quay.io”,<br>    “gcr”: “gcr.io”,<br>    “k8s-gcr”: “k8s.gcr.io”,<br>    “k8s”: “registry.k8s.io”,<br>    “ghcr”: “ghcr.io”,<br>    “cloudsmith”: “docker.cloudsmith.io”,<br>    “nvcr”: “nvcr.io”,<br><br>    // 测试环境<br>    “test”: “registry-1.docker.io”,<br>};<br><br>if (host in routes) return [routes[host], false];<br>else return [hub_host, true];<br>}</p><p>/** @type {RequestInit} <em>/<br>const PREFLIGHT_INIT = {<br>// 预检请求配置<br>headers: new Headers({<br>    ‘access-control-allow-origin’: ‘</em>‘, // 允许所有来源<br>    ‘access-control-allow-methods’: ‘GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS’, // 允许的HTTP方法<br>    ‘access-control-max-age’: ‘1728000’, // 预检请求的缓存时间<br>}),<br>}</p><p>/**</p><ul><li>构造响应</li><li>@param {any} body 响应体</li><li>@param {number} status 响应状态码</li><li>@param {Object&lt;string, string&gt;} headers 响应头<br> <em>/<br> function makeRes(body, status = 200, headers = {}) {<br> headers[‘access-control-allow-origin’] = ‘</em>‘ // 允许所有来源<br> return new Response(body, { status, headers }) // 返回新构造的响应<br> }</li></ul><p>/**</p><ul><li>构造新的URL对象</li><li>@param {string} urlStr URL字符串</li><li>@param {string} base URL base<br> */<br> function newUrl(urlStr, base) {<br> try {<br> console.log(<code>Constructing new URL object with path ${urlStr} and base ${base}</code>);<br> return new URL(urlStr, base); // 尝试构造新的URL对象<br> } catch (err) {<br> console.error(err);<br> return null // 构造失败返回null<br> }<br> }</li></ul><p>async function nginx() {<br>    const text = `<br>    <br>    <br>    <br>    <title>Welcome to nginx!</title><br>    <style><br>        body {<br>            width: 35em;<br>            margin: 0 auto;<br>            font-family: Tahoma, Verdana, Arial, sans-serif;<br>        }<br>    </style><br>    <br>    <br>    </p><h1>Welcome to nginx!</h1><br>    <p>If you see this page, the nginx web server is successfully installed and<br>    working. Further configuration is required.</p><p></p><pre><code>&lt;p&gt;For online documentation and support please refer to&lt;a href="http://nginx.org/"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;Commercial support is available at&lt;a href="http://nginx.com/"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;`return text;</code></pre><p>}</p><p>async function searchInterface() {<br>    const html = `<br>    <br>    <br>    <br>        <title>Docker Hub 镜像搜索</title><br>        <meta charset="UTF-8"><br>        <meta name="viewport" content="width=device-width, initial-scale=1.0"><br>        <style><br>        :root {<br>            –github-color: rgb(27,86,198);<br>            –github-bg-color: #ffffff;<br>            –primary-color: #0066ff;<br>            –primary-dark: #0052cc;<br>            –gradient-start: #1a90ff;<br>            –gradient-end: #003eb3;<br>            –text-color: #ffffff;<br>            –shadow-color: rgba(0,0,0,0.1);<br>            –transition-time: 0.3s;<br>        }</p><pre><code>    * &#123;        box-sizing: border-box;        margin: 0;        padding: 0;    &#125;    body &#123;        font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif;        display: flex;        flex-direction: column;        justify-content: center;        align-items: center;        min-height: 100vh;        margin: 0;        background: linear-gradient(135deg, var(--gradient-start) 0%, var(--gradient-end) 100%);        padding: 20px;        color: var(--text-color);        overflow-x: hidden;    &#125;    .container &#123;        text-align: center;        width: 100%;        max-width: 800px;        padding: 20px;        margin: 0 auto;        display: flex;        flex-direction: column;        justify-content: center;        min-height: 60vh;        animation: fadeIn 0.8s ease-out;    &#125;    @keyframes fadeIn &#123;        from &#123; opacity: 0; transform: translateY(20px); &#125;        to &#123; opacity: 1; transform: translateY(0); &#125;    &#125;    .github-corner &#123;        position: fixed;        top: 0;        right: 0;        z-index: 999;        transition: transform var(--transition-time) ease;    &#125;        .github-corner:hover &#123;        transform: scale(1.08);    &#125;    .github-corner svg &#123;        fill: var(--github-bg-color);        color: var(--github-color);        position: absolute;        top: 0;        border: 0;        right: 0;        width: 80px;        height: 80px;        filter: drop-shadow(0 2px 5px rgba(0, 0, 0, 0.2));    &#125;    .logo &#123;        margin-bottom: 20px;        transition: transform var(--transition-time) ease;        animation: float 6s ease-in-out infinite;    &#125;        @keyframes float &#123;        0%, 100% &#123; transform: translateY(0); &#125;        50% &#123; transform: translateY(-10px); &#125;    &#125;        .logo:hover &#123;        transform: scale(1.08) rotate(5deg);    &#125;        .logo svg &#123;        filter: drop-shadow(0 5px 15px rgba(0, 0, 0, 0.2));    &#125;        .title &#123;        color: var(--text-color);        font-size: 2.3em;        margin-bottom: 10px;        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);        font-weight: 700;        letter-spacing: -0.5px;        animation: slideInFromTop 0.5s ease-out 0.2s both;    &#125;        @keyframes slideInFromTop &#123;        from &#123; opacity: 0; transform: translateY(-20px); &#125;        to &#123; opacity: 1; transform: translateY(0); &#125;    &#125;        .subtitle &#123;        color: rgba(255, 255, 255, 0.9);        font-size: 1.1em;        margin-bottom: 25px;        max-width: 600px;        margin-left: auto;        margin-right: auto;        line-height: 1.4;        animation: slideInFromTop 0.5s ease-out 0.4s both;    &#125;        .search-container &#123;        display: flex;        align-items: stretch;        width: 100%;        max-width: 600px;        margin: 0 auto;        height: 55px;        position: relative;        animation: slideInFromBottom 0.5s ease-out 0.6s both;        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);        border-radius: 12px;        overflow: hidden;    &#125;        @keyframes slideInFromBottom &#123;        from &#123; opacity: 0; transform: translateY(20px); &#125;        to &#123; opacity: 1; transform: translateY(0); &#125;    &#125;        #search-input &#123;        flex: 1;        padding: 0 20px;        font-size: 16px;        border: none;        outline: none;        transition: all var(--transition-time) ease;        height: 100%;    &#125;        #search-input:focus &#123;        padding-left: 25px;    &#125;        #search-button &#123;        width: 60px;        background-color: var(--primary-color);        border: none;        cursor: pointer;        transition: all var(--transition-time) ease;        height: 100%;        display: flex;        align-items: center;        justify-content: center;        position: relative;    &#125;        #search-button svg &#123;        transition: transform 0.3s ease;        stroke: white;    &#125;        #search-button:hover &#123;        background-color: var(--primary-dark);    &#125;        #search-button:hover svg &#123;        transform: translateX(2px);    &#125;        #search-button:active svg &#123;        transform: translateX(4px);    &#125;        .tips &#123;        color: rgba(255, 255, 255, 0.8);        margin-top: 20px;        font-size: 0.9em;        animation: fadeIn 0.5s ease-out 0.8s both;        transition: transform var(--transition-time) ease;    &#125;        .tips:hover &#123;        transform: translateY(-2px);    &#125;        @media (max-width: 768px) &#123;        .container &#123;            padding: 20px 15px;            min-height: 60vh;        &#125;                .title &#123;            font-size: 2em;        &#125;                .subtitle &#123;            font-size: 1em;            margin-bottom: 20px;        &#125;                .search-container &#123;            height: 50px;        &#125;    &#125;        @media (max-width: 480px) &#123;        .container &#123;            padding: 15px 10px;            min-height: 60vh;        &#125;                .github-corner svg &#123;            width: 60px;            height: 60px;        &#125;                .search-container &#123;            height: 45px;        &#125;                #search-input &#123;            padding: 0 15px;        &#125;                #search-button &#123;            width: 50px;        &#125;                #search-button svg &#123;            width: 18px;            height: 18px;        &#125;                .title &#123;            font-size: 1.7em;            margin-bottom: 8px;        &#125;                .subtitle &#123;            font-size: 0.95em;            margin-bottom: 18px;        &#125;    &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;https://github.com/cmliu/CF-Workers-docker.io&quot; target=&quot;_blank&quot; class=&quot;github-corner&quot; aria-label=&quot;View source on Github&quot;&gt;        &lt;svg viewBox=&quot;0 0 250 250&quot; aria-hidden=&quot;true&quot;&gt;            &lt;path d=&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;&gt;&lt;/path&gt;            &lt;path d=&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot; fill=&quot;currentColor&quot; style=&quot;transform-origin: 130px 106px;&quot; class=&quot;octo-arm&quot;&gt;&lt;/path&gt;            &lt;path d=&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot; fill=&quot;currentColor&quot; class=&quot;octo-body&quot;&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;logo&quot;&gt;            &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 18&quot; fill=&quot;#ffffff&quot; width=&quot;110&quot; height=&quot;85&quot;&gt;                &lt;path d=&quot;M23.763 6.886c-.065-.053-.673-.512-1.954-.512-.32 0-.659.03-1.01.087-.248-1.703-1.651-2.533-1.716-2.57l-.345-.2-.227.328a4.596 4.596 0 0 0-.611 1.433c-.23.972-.09 1.884.403 2.666-.596.331-1.546.418-1.744.42H.752a.753.753 0 0 0-.75.749c-.007 1.456.233 2.864.692 4.07.545 1.43 1.355 2.483 2.409 3.13 1.181.725 3.104 1.14 5.276 1.14 1.016 0 2.03-.092 2.93-.266 1.417-.273 2.705-.742 3.826-1.391a10.497 10.497 0 0 0 2.61-2.14c1.252-1.42 1.998-3.005 2.553-4.408.075.003.148.005.221.005 1.371 0 2.215-.55 2.68-1.01.505-.5.685-.998.704-1.053L24 7.076l-.237-.19Z&quot;&gt;&lt;/path&gt;                &lt;path d=&quot;M2.216 8.075h2.119a.186.186 0 0 0 .185-.186V6a.186.186 0 0 0-.185-.186H2.216A.186.186 0 0 0 2.031 6v1.89c0 .103.083.186.185.186Zm2.92 0h2.118a.185.185 0 0 0 .185-.186V6a.185.185 0 0 0-.185-.186H5.136A.185.185 0 0 0 4.95 6v1.89c0 .103.083.186.186.186Zm2.964 0h2.118a.186.186 0 0 0 .185-.186V6a.186.186 0 0 0-.185-.186H8.1A.185.185 0 0 0 7.914 6v1.89c0 .103.083.186.186.186Zm2.928 0h2.119a.185.185 0 0 0 .185-.186V6a.185.185 0 0 0-.185-.186h-2.119a.186.186 0 0 0-.185.186v1.89c0 .103.083.186.185.186Zm-5.892-2.72h2.118a.185.185 0 0 0 .185-.186V3.28a.186.186 0 0 0-.185-.186H5.136a.186.186 0 0 0-.186.186v1.89c0 .103.083.186.186.186Zm2.964 0h2.118a.186.186 0 0 0 .185-.186V3.28a.186.186 0 0 0-.185-.186H8.1a.186.186 0 0 0-.186.186v1.89c0 .103.083.186.186.186Zm2.928 0h2.119a.185.185 0 0 0 .185-.186V3.28a.186.186 0 0 0-.185-.186h-2.119a.186.186 0 0 0-.185.186v1.89c0 .103.083.186.185.186Zm0-2.72h2.119a.186.186 0 0 0 .185-.186V.56a.185.185 0 0 0-.185-.186h-2.119a.186.186 0 0 0-.185.186v1.89c0 .103.083.186.185.186Zm2.955 5.44h2.118a.185.185 0 0 0 .186-.186V6a.185.185 0 0 0-.186-.186h-2.118a.185.185 0 0 0-.185.186v1.89c0 .103.083.186.185.186Z&quot;&gt;&lt;/path&gt;            &lt;/svg&gt;        &lt;/div&gt;        &lt;h1 class=&quot;title&quot;&gt;Docker Hub 镜像搜索&lt;/h1&gt;        &lt;p class=&quot;subtitle&quot;&gt;快速查找、下载和部署 Docker 容器镜像&lt;/p&gt;        &lt;div class=&quot;search-container&quot;&gt;            &lt;input type=&quot;text&quot; id=&quot;search-input&quot; placeholder=&quot;输入关键词搜索镜像，如: nginx, mysql, redis...&quot;&gt;            &lt;button id=&quot;search-button&quot; title=&quot;搜索&quot;&gt;                &lt;svg width=&quot;20&quot; height=&quot;20&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; viewBox=&quot;0 0 24 24&quot;&gt;                    &lt;path d=&quot;M13 5l7 7-7 7M5 5l7 7-7 7&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;/path&gt;                &lt;/svg&gt;            &lt;/button&gt;        &lt;/div&gt;        &lt;p class=&quot;tips&quot;&gt;基于 Cloudflare Workers / Pages 构建，利用全球边缘网络实现毫秒级响应。&lt;/p&gt;    &lt;/div&gt;    &lt;script&gt;    function performSearch() &#123;        const query = document.getElementById(&#39;search-input&#39;).value;        if (query) &#123;            window.location.href = &#39;/search?q=&#39; + encodeURIComponent(query);        &#125;    &#125;    document.getElementById(&#39;search-button&#39;).addEventListener(&#39;click&#39;, performSearch);    document.getElementById(&#39;search-input&#39;).addEventListener(&#39;keypress&#39;, function(event) &#123;        if (event.key === &#39;Enter&#39;) &#123;            performSearch();        &#125;    &#125;);    // 添加焦点在搜索框    window.addEventListener(&#39;load&#39;, function() &#123;        document.getElementById(&#39;search-input&#39;).focus();    &#125;);    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;`;return html;</code></pre><p>}</p><p>export default {<br>    async fetch(request, env, ctx) {<br>        const getReqHeader &#x3D; (key) &#x3D;&gt; request.headers.get(key); &#x2F;&#x2F; 获取请求头</p><pre><code>    let url = new URL(request.url); // 解析请求URL    const userAgentHeader = request.headers.get(&#39;User-Agent&#39;);    const userAgent = userAgentHeader ? userAgentHeader.toLowerCase() : &quot;null&quot;;    if (env.UA) 屏蔽爬虫UA = 屏蔽爬虫UA.concat(await ADD(env.UA));    const workers_url = `https://$&#123;url.hostname&#125;`;    // 获取请求参数中的 ns    const ns = url.searchParams.get(&#39;ns&#39;);    const hostname = url.searchParams.get(&#39;hubhost&#39;) || url.hostname;    const hostTop = hostname.split(&#39;.&#39;)[0]; // 获取主机名的第一部分    let checkHost; // 在这里定义 checkHost 变量    // 如果存在 ns 参数，优先使用它来确定 hub_host    if (ns) &#123;        if (ns === &#39;docker.io&#39;) &#123;            hub_host = &#39;registry-1.docker.io&#39;; // 设置上游地址为 registry-1.docker.io        &#125; else &#123;            hub_host = ns; // 直接使用 ns 作为 hub_host        &#125;    &#125; else &#123;        checkHost = routeByHosts(hostTop);        hub_host = checkHost[0]; // 获取上游地址    &#125;    const fakePage = checkHost ? checkHost[1] : false; // 确保 fakePage 不为 undefined    console.log(`域名头部: $&#123;hostTop&#125; 反代地址: $&#123;hub_host&#125; searchInterface: $&#123;fakePage&#125;`);    // 更改请求的主机名    url.hostname = hub_host;    const hubParams = [&#39;/v1/search&#39;, &#39;/v1/repositories&#39;];    if (屏蔽爬虫UA.some(fxxk =&gt; userAgent.includes(fxxk)) &amp;&amp; 屏蔽爬虫UA.length &gt; 0) &#123;        // 首页改成一个nginx伪装页        return new Response(await nginx(), &#123;            headers: &#123;                &#39;Content-Type&#39;: &#39;text/html; charset=UTF-8&#39;,            &#125;,        &#125;);    &#125; else if ((userAgent &amp;&amp; userAgent.includes(&#39;mozilla&#39;)) || hubParams.some(param =&gt; url.pathname.includes(param))) &#123;        if (url.pathname == &#39;/&#39;) &#123;            if (env.URL302) &#123;                return Response.redirect(env.URL302, 302);            &#125; else if (env.URL) &#123;                if (env.URL.toLowerCase() == &#39;nginx&#39;) &#123;                    //首页改成一个nginx伪装页                    return new Response(await nginx(), &#123;                        headers: &#123;                            &#39;Content-Type&#39;: &#39;text/html; charset=UTF-8&#39;,                        &#125;,                    &#125;);                &#125; else return fetch(new Request(env.URL, request));            &#125; else    &#123;                if (fakePage) return new Response(await searchInterface(), &#123;                    headers: &#123;                        &#39;Content-Type&#39;: &#39;text/html; charset=UTF-8&#39;,                    &#125;,                &#125;);            &#125;        &#125; else &#123;            if (fakePage) url.hostname = &#39;hub.docker.com&#39;;            if (url.searchParams.get(&#39;q&#39;)?.includes(&#39;library/&#39;) &amp;&amp; url.searchParams.get(&#39;q&#39;) != &#39;library/&#39;) &#123;                const search = url.searchParams.get(&#39;q&#39;);                url.searchParams.set(&#39;q&#39;, search.replace(&#39;library/&#39;, &#39;&#39;));            &#125;            const newRequest = new Request(url, request);            return fetch(newRequest);        &#125;    &#125;    // 修改包含 %2F 和 %3A 的请求    if (!/%2F/.test(url.search) &amp;&amp; /%3A/.test(url.toString())) &#123;        let modifiedUrl = url.toString().replace(/%3A(?=.*?&amp;)/, &#39;%3Alibrary%2F&#39;);        url = new URL(modifiedUrl);        console.log(`handle_url: $&#123;url&#125;`);    &#125;    // 处理token请求    if (url.pathname.includes(&#39;/token&#39;)) &#123;        let token_parameter = &#123;            headers: &#123;                &#39;Host&#39;: &#39;auth.docker.io&#39;,                &#39;User-Agent&#39;: getReqHeader(&quot;User-Agent&quot;),                &#39;Accept&#39;: getReqHeader(&quot;Accept&quot;),                &#39;Accept-Language&#39;: getReqHeader(&quot;Accept-Language&quot;),                &#39;Accept-Encoding&#39;: getReqHeader(&quot;Accept-Encoding&quot;),                &#39;Connection&#39;: &#39;keep-alive&#39;,                &#39;Cache-Control&#39;: &#39;max-age=0&#39;            &#125;        &#125;;        let token_url = auth_url + url.pathname + url.search;        return fetch(new Request(token_url, request), token_parameter);    &#125;    // 修改 /v2/ 请求路径    if (hub_host == &#39;registry-1.docker.io&#39; &amp;&amp; /^\/v2\/[^/]+\/[^/]+\/[^/]+$/.test(url.pathname) &amp;&amp; !/^\/v2\/library/.test(url.pathname)) &#123;        //url.pathname = url.pathname.replace(/\/v2\//, &#39;/v2/library/&#39;);        url.pathname = &#39;/v2/library/&#39; + url.pathname.split(&#39;/v2/&#39;)[1];        console.log(`modified_url: $&#123;url.pathname&#125;`);    &#125;    // 构造请求参数    let parameter = &#123;        headers: &#123;            &#39;Host&#39;: hub_host,            &#39;User-Agent&#39;: getReqHeader(&quot;User-Agent&quot;),            &#39;Accept&#39;: getReqHeader(&quot;Accept&quot;),            &#39;Accept-Language&#39;: getReqHeader(&quot;Accept-Language&quot;),            &#39;Accept-Encoding&#39;: getReqHeader(&quot;Accept-Encoding&quot;),            &#39;Connection&#39;: &#39;keep-alive&#39;,            &#39;Cache-Control&#39;: &#39;max-age=0&#39;        &#125;,        cacheTtl: 3600 // 缓存时间    &#125;;    // 添加Authorization头    if (request.headers.has(&quot;Authorization&quot;)) &#123;        parameter.headers.Authorization = getReqHeader(&quot;Authorization&quot;);    &#125;    // 添加可能存在字段X-Amz-Content-Sha256    if (request.headers.has(&quot;X-Amz-Content-Sha256&quot;)) &#123;        parameter.headers[&#39;X-Amz-Content-Sha256&#39;] = getReqHeader(&quot;X-Amz-Content-Sha256&quot;);    &#125;    // 发起请求并处理响应    let original_response = await fetch(new Request(url, request), parameter);    let original_response_clone = original_response.clone();    let original_text = original_response_clone.body;    let response_headers = original_response.headers;    let new_response_headers = new Headers(response_headers);    let status = original_response.status;    // 修改 Www-Authenticate 头    if (new_response_headers.get(&quot;Www-Authenticate&quot;)) &#123;        let auth = new_response_headers.get(&quot;Www-Authenticate&quot;);        let re = new RegExp(auth_url, &#39;g&#39;);        new_response_headers.set(&quot;Www-Authenticate&quot;, response_headers.get(&quot;Www-Authenticate&quot;).replace(re, workers_url));    &#125;    // 处理重定向    if (new_response_headers.get(&quot;Location&quot;)) &#123;        const location = new_response_headers.get(&quot;Location&quot;);        console.info(`Found redirection location, redirecting to $&#123;location&#125;`);        return httpHandler(request, location, hub_host);    &#125;    // 返回修改后的响应    let response = new Response(original_text, &#123;        status,        headers: new_response_headers    &#125;);    return response;&#125;</code></pre><p>};</p><p>&#x2F;**</p><ul><li><p>处理HTTP请求</p></li><li><p>@param {Request} req 请求对象</p></li><li><p>@param {string} pathname 请求路径</p></li><li><p>@param {string} baseHost 基地址<br> *&#x2F;<br> function httpHandler(req, pathname, baseHost) {<br> const reqHdrRaw &#x3D; req.headers;</p><p> &#x2F;&#x2F; 处理预检请求<br> if (req.method &#x3D;&#x3D;&#x3D; ‘OPTIONS’ &amp;&amp;<br> reqHdrRaw.has(‘access-control-request-headers’)<br> ) {<br> return new Response(null, PREFLIGHT_INIT);<br> }</p><p> let rawLen &#x3D; ‘’;</p><p> const reqHdrNew &#x3D; new Headers(reqHdrRaw);</p><p> reqHdrNew.delete(“Authorization”); &#x2F;&#x2F; 修复s3错误</p><p> const refer &#x3D; reqHdrNew.get(‘referer’);</p><p> let urlStr &#x3D; pathname;</p><p> const urlObj &#x3D; newUrl(urlStr, ‘https:&#x2F;&#x2F;‘ + baseHost);</p><p> &#x2F;** @type {RequestInit} *&#x2F;<br> const reqInit &#x3D; {<br> method: req.method,<br> headers: reqHdrNew,<br> redirect: ‘follow’,<br> body: req.body<br> };<br> return proxy(urlObj, reqInit, rawLen);</p></li></ul><p> }</p><p>&#x2F;**</p><ul><li><p>代理请求</p></li><li><p>@param {URL} urlObj URL对象</p></li><li><p>@param {RequestInit} reqInit 请求初始化对象</p></li><li><p>@param {string} rawLen 原始长度<br> *&#x2F;<br> async function proxy(urlObj, reqInit, rawLen) {<br> const res &#x3D; await fetch(urlObj.href, reqInit);<br> const resHdrOld &#x3D; res.headers;<br> const resHdrNew &#x3D; new Headers(resHdrOld);</p><p> &#x2F;&#x2F; 验证长度<br> if (rawLen) {<br> const newLen &#x3D; resHdrOld.get(‘content-length’) || ‘’;<br> const badLen &#x3D; (rawLen !&#x3D;&#x3D; newLen);<br><br> if (badLen) {<br>     return makeRes(res.body, 400, {<br>         ‘–error’: <code>bad len: $&#123;newLen&#125;, except: $&#123;rawLen&#125;</code>,<br>         ‘access-control-expose-headers’: ‘–error’,<br>     });<br> }<br> }<br> const status &#x3D; res.status;<br> resHdrNew.set(‘access-control-expose-headers’, ‘<em>‘);<br> resHdrNew.set(‘access-control-allow-origin’, ‘</em>‘);<br> resHdrNew.set(‘Cache-Control’, ‘max-age&#x3D;1500’);</p><p> &#x2F;&#x2F; 删除不必要的头<br> resHdrNew.delete(‘content-security-policy’);<br> resHdrNew.delete(‘content-security-policy-report-only’);<br> resHdrNew.delete(‘clear-site-data’);</p><p> return new Response(res.body, {<br> status,<br> headers: resHdrNew<br> });</p></li></ul><p> }</p><p>async function ADD(envadd) {<br>    var addtext &#x3D; envadd.replace(&#x2F;[     |”‘\r\n]+&#x2F;g, ‘,’).replace(&#x2F;,+&#x2F;g, ‘,’);    &#x2F;&#x2F; 将空格、双引号、单引号和换行符替换为逗号<br>    if (addtext.charAt(0) &#x3D;&#x3D; ‘,’) addtext &#x3D; addtext.slice(1);<br>    if (addtext.charAt(addtext.length - 1) &#x3D;&#x3D; ‘,’) addtext &#x3D; addtext.slice(0, addtext.length - 1);<br>    const add &#x3D; addtext.split(‘,’);<br>    return add;<br>}&#96;</p></li></ul><p><img src="https://gh.zsir.us.kg/https://raw.githubusercontent.com/gracelsy/picx-images-hosting/master/%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F.jpg"></p><h4 id="workers自定义域名"><a href="#workers自定义域名" class="headerlink" title="workers自定义域名"></a>workers自定义域名</h4><p>因为不可描述的原因，访问<strong>workers.dev</strong>域名可能会遇到一些障碍。为了解决这个问题，我们需要在Workers项目内通过自定义域名访问或Workers路由。</p><p>这里只对自定义域名进行演示，Workers路由涉及到<strong>CF优选</strong>会在下一篇文章中进行演示</p><p>在该Workers项目中设置中找到域和路由，点击添加选择自定义域，输入自定义域名后点击添加域，Cloudflare会自动帮你添加DNS记录</p><p><img src="https://gh.zsir.us.kg/https://raw.githubusercontent.com/gracelsy/picx-images-hosting/master/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D.png"></p><p>恭喜你，现在就可以通过自定义域名访问了，会出现下方画面</p><p>![](<a href="https://gh.zsir.us.kg/https://raw.githubusercontent.com/gracelsy/picx-images-hosting/master/Docker">https://gh.zsir.us.kg/https://raw.githubusercontent.com/gracelsy/picx-images-hosting/master/Docker</a> Woekers演示.png)</p></style></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Debian </category>
          
          <category> Ubuntu </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Openwrt </tag>
            
            <tag> Docker </tag>
            
            <tag> CloudFlare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyTier异地组网教程</title>
      <link href="/posts/efb26950.html"/>
      <url>/posts/efb26950.html</url>
      
        <content type="html"><![CDATA[<hr><p>异地组网简单来说，就是把两个或多个不在同一地方的小网络（比如家里和公司），通过互联网或专用线路连接成一个大网络。这样不同地方的电脑、打印机、服务器等设备就能互相访问，就像在同一个办公室一样方便。当下最常用的异地组网工具有<strong>zerotier</strong>、<strong>Tailscale</strong>、<strong>wireguard</strong>，当然还有其他组网工具。 <strong><a href="https://easytier.cn/">EasyTier</a></strong> 是大佬 <strong>@雨过。天晴</strong> 开源的内网穿透远程组网方案。EasyTier最主要的特点就是去中心化，客户端也是DERP 中继服务器（当你通过命令或配置文件开放相应的端口启动后，EasyTier就是服务端）。</p><h3 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu"></a>Debian/Ubuntu</h3><h4 id="安装EasyTier"><a href="#安装EasyTier" class="headerlink" title="安装EasyTier"></a>安装EasyTier</h4><p>访问 <a href="https://github.com/EasyTier/EasyTier/releases/"><strong>⬇️下载页面</strong></a> 下载适用于您操作系统的二进制文件或安装包。</p><p>注：请下载最新的二进制文件或安装包不要复制粘贴</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新软件源并安装wget、unzip</span></span><br><span class="line">apt-get update&amp;&amp;apt install wget unzip -y</span><br><span class="line"><span class="comment"># 在/etc文件夹中创建easytier，并切换至/etc/easytier</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/easytier &amp;&amp; <span class="built_in">cd</span> /etc/easytier</span><br><span class="line"><span class="comment"># 请下载最新的安装包（Debian/Ubuntu/x86_64）,国内GitHub网络环境不好，自行解决下载慢或下载失败问题</span></span><br><span class="line">wget https://github.com/EasyTier/EasyTier/releases/download/v2.2.4/easytier-linux-x86_64-v2.2.4.zip</span><br><span class="line"><span class="comment"># 解压下载的安装包</span></span><br><span class="line">unzip easytier-linux-x86_64-v2.2.4.zip &amp;&amp; <span class="built_in">cp</span> easytier-linux-x86_64/* ./&amp;&amp;<span class="built_in">chmod</span> 700 ./*</span><br><span class="line"><span class="comment"># 删除多余文件</span></span><br><span class="line"><span class="built_in">rm</span> -f ./easytier-linux-x86_64-v2.2.4.zip &amp;&amp; <span class="built_in">rm</span> -rf ./easytier-linux-x86_64</span><br></pre></td></tr></tbody></table></figure><h4 id="启动EasyTier"><a href="#启动EasyTier" class="headerlink" title="启动EasyTier"></a>启动EasyTier</h4><p>EasyTier有三种启动方式，分别是命令行、配置文件、WEB配置。</p><h5 id="命令行启动"><a href="#命令行启动" class="headerlink" title="命令行启动"></a>命令行启动</h5><p>具体的参数请参考<a href="https://easytier.cn/guide/network/configurations.html"><strong>官方文档</strong></a>和<a href="https://doc.oee.icu:60009/web/#/625560517/103293299"><strong>社区文档</strong></a>的参数说明</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> easytier-core -i 10.144.144.1 --network-name abc --network-secret 123 -p tcp://public.easytier.cn:11010</span><br></pre></td></tr></tbody></table></figure><ul><li><font size="2"><strong>-i 10.144.144.1/24</strong> 代表指定当前主机的虚拟 IP 地址为10.144.144.1，子网掩码为255.255.255.0，其他客户端的虚拟 IP 地址必须在其虚拟局域网为10.144.144.0/24中，虚拟局域网不能于客户端局域网冲突，可设置虚拟局域网IPv4参考 - <a href="https://www.w3ccoo.com/ipv4/ipv4_reserved_addresses.html"><strong>保留地址</strong></a>；</font></li><li><font size="2">-<strong>-network-name abc</strong> 和 <strong>–network-secret 123</strong> 代表网络名abc和网络密钥123，相当于进入该虚拟局域网中的账号和密码；</font></li><li><font size="2"><strong>-p tcp://public.easytier.cn:11010</strong> 代表指定节点地址，tcp://public.easytier.cn:11010 官方的共享节点，也可使用EasyTier可爱群友提供的服务器和自建服务器。</font></li></ul><p><font size="2"><strong>注：</strong> 自建服务器需要用公网ip地址，客户端通过命令开放相应的TCP/UDP端口即可变为服务器，可参考官方文档<a href="https://easytier.cn/guide/network/decentralized-networking.html">去中心组网</a>。</font></p><h5 id="WEB配置"><a href="#WEB配置" class="headerlink" title="WEB配置"></a><strong>WEB配置</strong></h5><h5 id="配置文件启动"><a href="#配置文件启动" class="headerlink" title="配置文件启动"></a><strong>配置文件启动</strong></h5><p>配置文件可以使用 <strong><a href="https://easytier.cn/web/index.html#/config_generator">官方配置文件生成工具</a></strong> 和<a href="https://doc.oee.icu:60009/et#/"><strong>社区配置文件生成工具</strong></a>生成。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建配置文件</span></span><br><span class="line">nano /etc/easytier/config.yaml</span><br></pre></td></tr></tbody></table></figure><p>然后将生成的配置文件粘贴到config.yaml中，Ctrl+x 输入y保存</p><p><img src="https://img.zsir.us.kg/api/cfile/AgACAgUAAyEGAASJb2nwAAMeaCfkMuiEQ1cjv4fGV29BwafrmosAAk_QMRsuSThVCr_PVreLoZUBAAMCAAN3AAM2BA" alt="中国风-山水.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Debian </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EasyTier </tag>
            
            <tag> Openwrt </tag>
            
            <tag> Docker </tag>
            
            <tag> 异地组网 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
